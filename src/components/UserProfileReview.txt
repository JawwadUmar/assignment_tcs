UserProfile.tsx

Positives:
1. Component is functionally correct and there is no compile-time or run-time errors.
2. Basic error handling exists

Issues:
1. Use of any keyword violates type-safety
const [user, setUser] = useState<any>(null);

2. Define a proper User type and then declare the above useState
Suggestion: 
    type User = {
        id: number;
        name: string;
        bio: string;
    };

const [user, setUser] = useState<User | null>(null);

3. Missing Dependency in UserEffect
usedId should be present in the dependency array of the useEffect, otherwise if userId changes, the effect won't re-run
Suggestion:

    useEffect(() => {
        .....
    }, [userId]);

4. Error Handling can be improved
Only logging the error is not good. There must be user facing feedback if the fetch actually fails. 

Suggestion:
This can be done by maintaining an error state which renders a message upon failure.

    const [error, setError] = useState<string | null>(null);
    fetch(...).catch(err=>setError('Failed to load user data'));

5. No cancellation logic in useEffect might lead to Performance Issues
If userId changes rapidly, multiple fetches may overlap and update state incorrectly.
Suggestion : Use AbortController

    useEffect(() => {
    const controller = new AbortController();
    fetch(..., { signal: controller.signal })
        .then(...)
        .catch(...);
    return () => controller.abort();
    }, [userId]);

6. Security Concerns
The fetch url is hardcoded which is a bad practice. It can expose our internal endpoints.
Suggestion: Use .env file and store thr url in an environment variable

